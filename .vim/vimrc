
" autocmd FileType python nnoremap >vuffer> <cr> :silent w<bar>only<bar>vsp<bar>term ipython3 -i %<cr>
let mapleader=" "

call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'                  " the best colorscheme in the universe!
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'itchyny/vim-gitbranch'
Plug 'mhinz/vim-signify'                                " adds git gutter marks
Plug 'posva/vim-vue'                       " syntax highlighting for .vue files
Plug 'vimwiki/vimwiki'
Plug 'psf/black'
call plug#end()

colorscheme gruvbox
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE

set number
set rnu
set nowrap
set nobackup
set undofile
set incsearch
set expandtab
set smartcase
set ignorecase
set noswapfile
set noshowmode
set noerrorbells
"set showtabline=2
set colorcolumn=80
set background=dark
set clipboard=unnamedplus
set undodir=~/.config/nvim/undodir
set foldlevel=20
set splitbelow splitright
set list
set foldmethod=manual
set foldmethod=indent
set updatetime=100
set hidden
set autoread
set spell
set spellcapcheck=
" set shortmess=I
hi Search ctermfg=DarkGreen
hi ColorColumn ctermbg=Black
set listchars=eol:$,nbsp:_,tab:>-,trail:~,extends:>,precedes:<

" spacing -- default is 4 spaces
set tabstop=4 softtabstop=4 shiftwidth=4
autocmd FileType vue setlocal ts=2 sts=2 sw=2
autocmd FileType html,htmldjango setlocal ts=2 sts=2 sw=2
autocmd FileType javascript setlocal ts=2 sts=2 sw=2
autocmd FileType jsonnet setlocal ts=2 sts=2 sw=2

" create ctags for site-packages in env
map <F6> :!ctags -R -f ./tags `python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())"`<CR>

" get back to being NORMAL
inoremap jk <ESC>

" move selected lines up and down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
"syntax highlighting for git changed lines
nnoremap <Leader>8 :set textwidth=80 <CR>
"remove syntax highlighting
nnoremap <Leader>9 :noh<CR>
" run black on .py files
" nnoremap <Leader>b :Black<CR>
" look at open buffers
" nnoremap <Leader>o :Buffers<CR>
" move to splits
nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>j :wincmd j<CR>
nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>l :wincmd l<CR>

nnoremap <Leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
" remove whitespace at the end of lines
nnoremap <Leader>w :call TrimWhitespace()<CR>
" toggle word wrap
" nnoremap <Leader>w :set wrap!<Cr>

nnoremap <silent> <C-Left> :vertical resize +3<CR>
nnoremap <silent> <C-Right> :vertical resize -3<CR>
nnoremap <silent> <C-Up> :resize +3<CR>
nnoremap <silent> <C-Down> :resize -3<CR>
nnoremap <silent> <leader>gd :YcmCompleter GoTo<CR>
" nnoremap <silent> <leader>gf :YcmCompleter FixIt<CR>
" reload all buffers at once!
nnoremap <F5> :bufdo! e<CR>
map <C-f> <Esc><Esc>:Files!<CR>
inoremap <C-f> <Esc><Esc>:BLines!<CR>
map <C-g> <Esc><Esc>:BCommits!<CR>
map <C-p> :GFiles<CR>
nmap <leader><C-]> :execute 'tab tag '.expand('<cword>')<CR>
" open up RipGrep!
nnoremap <silent> <leader>ff :Rg<CR>
nnoremap <silent> <leader>o :Files<CR>
nnoremap <silent> <leader>t :Buffers<CR>
" open up netrw!
nnoremap <silent> <leader>x :Lex!<CR>
" remap :bd, quicker
nnoremap <silent> <leader>q :bd<CR>
" delete all buffers from current to last
map <leader>z :.,$-bd<CR>
let g:usemarks = 0 " dont't use marks with brackets
let g:python_host_prog = "/usr/bin/python"
let g:python3_host_prog = "/usr/bin/python3"
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

let g:netrw_browse_split=0
"let g:netrw_banner=0
let g:netrw_winsize=25
" don't save history in .vim folder
let g:netrw_dirhistmax = 0

let g:slime_target = "neovim"
let g:slime_paste_file = "$HOME/.slime_paste"
" let g:slime_target = "tmux"
" let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}
" terminal mode exit insert
tnoremap <leader>q <C-\><C-n>
let g:ctrlp_use_caching          =0
" better tabbing
vnoremap < < gv
vnoremap > > gv

" vim fugitive git settings -- coconut oil ABOUND!
nmap <leader>gl :diffget //3<CR>
nmap <leader>gh :diffget //2<CR>
nmap <leader>gs :G<CR>

"      _             _  __
"  ___(_) __ _ _ __ (_)/ _|_   _
" / __| |/ _` | '_ \| | |_| | | |
" \__ \ | (_| | | | | |  _| |_| |
" |___/_|\__, |_| |_|_|_|  \__, |
"        |___/             |___/
nmap <leader>gj <plug>(signify-next-hunk)
nmap <leader>gk <plug>(signify-prev-hunk)
nnoremap <silent> <leader>su :SignifyHunkUndo<CR>
nnoremap <silent> <leader>sd :SignifyHunkDiff<CR>
let g:signify_sign_change                     ='~'
let g:signify_sign_delete                     ='-'
let g:signify_sign_show_count                 =0

"  _ _       _     _   _ _
" | (_) __ _| |__ | |_| (_)_ __   ___
" | | |/ _` | '_ \| __| | | '_ \ / _ \
" | | | (_| | | | | |_| | | | | |  __/
" |_|_|\__, |_| |_|\__|_|_|_| |_|\___|
"      |___/
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'FilenameForLightline',
      \   'gitbranch': 'gitbranch#name'
      \ }
      \ }
" lightline-bufferline integration
let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#shorten_path = 0
let g:lightline#bufferline#unnamed	= '[No Name]'
let g:lightline.tabline				= {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand	= {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type		= {'buffers': 'tabsel'}
let g:lightline#bufferline#composed_number_map = {
\ 1:  '⑴ ', 2:  '⑵ ', 3:  '⑶ ', 4:  '⑷ ', 5:  '⑸ ',
\ 6:  '⑹ ', 7:  '⑺ ', 8:  '⑻ ', 9:  '⑼ ', 10: '⑽ ',
\ 11: '⑾ ', 12: '⑿ ', 13: '⒀ ', 14: '⒁ ', 15: '⒂ ',
\ 16: '⒃ ', 17: '⒄ ', 18: '⒅ ', 19: '⒆ ', 20: '⒇ '}
let g:lightline#bufferline#min_buffer_count = 2
" lightline-bufferline mappings
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)

" Show full path of filename
function! FilenameForLightline()
  let root = fnamemodify(get(b:, 'git_dir'), ':h')
  let path = expand('%:p')
  if path[:len(root)-1] ==# root
    return path[len(root)+1:]
  endif
  return expand('%')
endfunction

" remove whitespace at the end of lines
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

" format an XML file
com! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"

nnoremap <Leader>fx :FormatXML<Cr>

" pretty print all json in a file
" :%!python -m json.tool

" format .py files with Black when leaving Insert mode
" autocmd InsertLeave *.py execute ':Black'
" let g:black_linelength = 90

" source this MOFO
au! BufWritePost $MYVIMRC source %
com! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"

nnoremap = :FormatXML<Cr>
autocmd BufNewFile *.py 0r ~/.config/nvim/skeletons/python.py

" what do you want to do?
command! -bang -complete=dir -nargs=* LS
    \ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))
